import{M as he,c as me,a as ve}from"./current-dataset-navigation-guards-D6PAcll1.js";import{B as ge,k as ye,C as be,D as ke,E as we,l as Ce,m as _e,F as Ee,K as Se,R as De,S as Oe,p as Ae,T as Pe,q as Te,s as xe,u as Ie,x as Ne,y as je,V as Re,z as Ue,A as ze,G as Me,H as Be,I as Fe,J as He,L as $e,M as Le,N as Ve,O as qe,h as Ge,a as P,b as o,P as Ke,Q as Xe,U as Je,W as We,X as Ye,i as Qe,Y as q,d as A,Z as Ze,$ as et,a0 as tt,a1 as rt,a2 as st,a3 as nt,a4 as it,a5 as at,a6 as ot,a7 as lt,a8 as ut,a9 as dt,aa as ct,ab as ft,ac as pt,ad as ht,ae as mt,af as vt,ag as gt,ah as yt,ai as bt,aj as kt,ak as wt,al as Ct,am as _t,an as Et,ao as St,ap as Dt,aq as Ot,ar as At,as as Pt,at as Tt,au as xt,av as It,aw as Nt,ax as jt,ay as Rt,n as Ut,j as H,az as zt,aA as $,aB as Mt,aC as Bt,aD as Ft,aE as Ht,aF as $t,aG as Lt,aH as Vt,aI as qt,aJ as Gt,aK as Kt,aL as Xt,aM as Jt,aN as Wt,o as T,aO as Yt,aP as Qt,aQ as Zt,aR as er,aS as tr,aT as rr,aU as sr,aV as nr,aW as ir,aX as ar,e as or,aY as lr,r as z,aZ as ur,a_ as dr,a$ as cr,b0 as fr,b1 as pr,b2 as hr,b3 as mr,b4 as vr,b5 as gr,b6 as yr,b7 as br,b8 as kr,b9 as wr,t as S,ba as Cr,bb as _r,bc as Er,bd as Sr,be as Dr,bf as Or,bg as Ar,bh as Pr,bi as Tr,bj as xr,bk as Ir,bl as Nr,bm as jr,bn as Rr,bo as Ur,bp as zr,bq as Mr,br as Br,bs as Fr,f as Hr,v as ee,bt as te,bu as $r,bv as Lr,bw as Vr,bx as qr,by as Gr,bz as Kr,bA as Xr,bB as N,bC as Jr,w as G,bD as Wr,bE as Yr,bF as M,bG as Qr,bH as Zr,c as es,g as ts,_ as rs,bI as ss,bJ as ns,bK as is,bL as as,bM as os,bN as ls,bO as us}from"./index-9t_Zu7tB.js";import{d as Z}from"./index-C-z09IKS.js";/**
* vue v3.4.31
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const ds=()=>{},cs=Object.freeze(Object.defineProperty({__proto__:null,BaseTransition:ge,BaseTransitionPropsValidators:ye,Comment:be,DeprecationTypes:ke,EffectScope:we,ErrorCodes:Ce,ErrorTypeStrings:_e,Fragment:Ee,KeepAlive:Se,ReactiveEffect:De,Static:Oe,Suspense:Ae,Teleport:Pe,Text:Te,TrackOpTypes:xe,Transition:Ie,TransitionGroup:Ne,TriggerOpTypes:je,VueElement:Re,assertNumber:Ue,callWithAsyncErrorHandling:ze,callWithErrorHandling:Me,camelize:Be,capitalize:Fe,cloneVNode:He,compatUtils:$e,compile:ds,computed:Le,createApp:Ve,createBlock:qe,createCommentVNode:Ge,createElementBlock:P,createElementVNode:o,createHydrationRenderer:Ke,createPropsRestProxy:Xe,createRenderer:Je,createSSRApp:We,createSlots:Ye,createStaticVNode:Qe,createTextVNode:q,createVNode:A,customRef:Ze,defineAsyncComponent:et,defineComponent:tt,defineCustomElement:rt,defineEmits:st,defineExpose:nt,defineModel:it,defineOptions:at,defineProps:ot,defineSSRCustomElement:lt,defineSlots:ut,devtools:dt,effect:ct,effectScope:ft,getCurrentInstance:pt,getCurrentScope:ht,getTransitionRawChildren:mt,guardReactiveProps:vt,h:gt,handleError:yt,hasInjectionContext:bt,hydrate:kt,initCustomFormatter:wt,initDirectivesForSSR:Ct,inject:_t,isMemoSame:Et,isProxy:St,isReactive:Dt,isReadonly:Ot,isRef:At,isRuntimeOnly:Pt,isShallow:Tt,isVNode:xt,markRaw:It,mergeDefaults:Nt,mergeModels:jt,mergeProps:Rt,nextTick:Ut,normalizeClass:H,normalizeProps:zt,normalizeStyle:$,onActivated:Mt,onBeforeMount:Bt,onBeforeUnmount:Ft,onBeforeUpdate:Ht,onDeactivated:$t,onErrorCaptured:Lt,onMounted:Vt,onRenderTracked:qt,onRenderTriggered:Gt,onScopeDispose:Kt,onServerPrefetch:Xt,onUnmounted:Jt,onUpdated:Wt,openBlock:T,popScopeId:Yt,provide:Qt,proxyRefs:Zt,pushScopeId:er,queuePostFlushCb:tr,reactive:rr,readonly:sr,ref:nr,registerRuntimeCompiler:ir,render:ar,renderList:or,renderSlot:lr,resolveComponent:z,resolveDirective:ur,resolveDynamicComponent:dr,resolveFilter:cr,resolveTransitionHooks:fr,setBlockTracking:pr,setDevtoolsHook:hr,setTransitionHooks:mr,shallowReactive:vr,shallowReadonly:gr,shallowRef:yr,ssrContextKey:br,ssrUtils:kr,stop:wr,toDisplayString:S,toHandlerKey:Cr,toHandlers:_r,toRaw:Er,toRef:Sr,toRefs:Dr,toValue:Or,transformVNodeArgs:Ar,triggerRef:Pr,unref:Tr,useAttrs:xr,useCssModule:Ir,useCssVars:Nr,useModel:jr,useSSRContext:Rr,useSlots:Ur,useTransitionState:zr,vModelCheckbox:Mr,vModelDynamic:Br,vModelRadio:Fr,vModelSelect:Hr,vModelText:ee,vShow:te,version:$r,warn:Lr,watch:Vr,watchEffect:qr,watchPostEffect:Gr,watchSyncEffect:Kr,withAsyncContext:Xr,withCtx:N,withDefaults:Jr,withDirectives:G,withKeys:Wr,withMemo:Yr,withModifiers:M,withScopeId:Qr},Symbol.toStringTag,{value:"Module"}));var re={exports:{}};const fs=Zr(cs);/*!
 Name: vue-upload-component 
Component URI: https://github.com/lian-yue/vue-upload-component#readme 
Version: 3.1.14 
Author: LianYue 
License: Apache-2.0 
Description: Vue.js file upload component, Multi-file upload, Upload directory, Drag upload, Drag the directory, Upload multiple files at the same time, html4 (IE 9), `PUT` method, Customize the filter 
 */(function(l,k){(function(b,I){l.exports=I(fs)})(es,function(b){function I(s){return x(s)||L(s)||v(s)||g()}function g(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function v(s,e){if(s){if(typeof s=="string")return j(s,e);var t=Object.prototype.toString.call(s).slice(8,-1);if(t==="Object"&&s.constructor&&(t=s.constructor.name),t==="Map"||t==="Set")return Array.from(s);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return j(s,e)}}function L(s){if(typeof Symbol<"u"&&s[Symbol.iterator]!=null||s["@@iterator"]!=null)return Array.from(s)}function x(s){if(Array.isArray(s))return j(s)}function j(s,e){(e==null||e>s.length)&&(e=s.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=s[t];return r}function B(s,e){var t=Object.keys(s);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(s);e&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(s,n).enumerable})),t.push.apply(t,r)}return t}function p(s){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?B(Object(t),!0).forEach(function(r){V(s,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(t)):B(Object(t)).forEach(function(r){Object.defineProperty(s,r,Object.getOwnPropertyDescriptor(t,r))})}return s}function V(s,e,t){return e in s?Object.defineProperty(s,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):s[e]=t,s}function R(s){"@babel/helpers - typeof";return R=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R(s)}function K(s,e){var t=Object.keys(s);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(s);e&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(s,n).enumerable})),t.push.apply(t,r)}return t}function F(s){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?K(Object(t),!0).forEach(function(r){ie(s,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(t)):K(Object(t)).forEach(function(r){Object.defineProperty(s,r,Object.getOwnPropertyDescriptor(t,r))})}return s}function se(s,e){if(!(s instanceof e))throw new TypeError("Cannot call a class as a function")}function X(s,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(s,r.key,r)}}function ne(s,e,t){return e&&X(s.prototype,e),t&&X(s,t),Object.defineProperty(s,"prototype",{writable:!1}),s}function ie(s,e,t){return e in s?Object.defineProperty(s,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):s[e]=t,s}var J=function(e){var t=new XMLHttpRequest;return t.open(e.method||"GET",e.url),t.responseType="json",e.headers&&Object.keys(e.headers).forEach(function(r){t.setRequestHeader(r,e.headers[r])}),t},ae=function(e,t){return new Promise(function(r,n){e.onload=function(){if(e.status>=200&&e.status<300){var i;try{i=JSON.parse(e.response)}catch{i=e.response}r(i)}else n(e.response)},e.onerror=function(){return n(e.response)},e.send(JSON.stringify(t))})},oe=function(e,t){var r=new FormData;for(var n in t)r.append(n,t[n]);return new Promise(function(i,a){e.onload=function(){if(e.status>=200&&e.status<300){var u;try{u=JSON.parse(e.response)}catch{u=e.response}i(u)}else a(e.response)},e.onerror=function(){return a(e.response)},e.send(r)})};function W(s){var e=J(s);return ae(e,s.body)}var le=function(){function s(e,t){se(this,s),this.file=e,this.options=t,this.chunks=[],this.sessionId=null,this.chunkSize=null,this.speedInterval=null}return ne(s,[{key:"maxRetries",get:function(){return parseInt(this.options.maxRetries,10)}},{key:"maxActiveChunks",get:function(){return parseInt(this.options.maxActive,10)}},{key:"fileType",get:function(){return this.file.type}},{key:"fileSize",get:function(){return this.file.size}},{key:"fileName",get:function(){return this.file.name}},{key:"action",get:function(){return this.options.action||null}},{key:"startBody",get:function(){return this.options.startBody||{}}},{key:"uploadBody",get:function(){return this.options.uploadBody||{}}},{key:"finishBody",get:function(){return this.options.finishBody||{}}},{key:"headers",get:function(){return this.options.headers||{}}},{key:"readyToUpload",get:function(){return!!this.chunks}},{key:"progress",get:function(){var t=this,r=this.chunksUploaded.length/this.chunks.length*100,n=this.chunksUploading.reduce(function(i,a){return i+(a.progress|0)/t.chunks.length},0);return Math.min(r+n,100)}},{key:"chunksToUpload",get:function(){return this.chunks.filter(function(t){return!t.active&&!t.uploaded})}},{key:"hasChunksToUpload",get:function(){return this.chunksToUpload.length>0}},{key:"chunksUploading",get:function(){return this.chunks.filter(function(t){return!!t.xhr&&!!t.active})}},{key:"chunksUploaded",get:function(){return this.chunks.filter(function(t){return!!t.uploaded})}},{key:"createChunks",value:function(){this.chunks=[];for(var t=0,r=this.chunkSize;t<this.fileSize;)this.chunks.push({blob:this.file.file.slice(t,r),startOffset:t,active:!1,retries:this.maxRetries}),t=r,r=t+this.chunkSize}},{key:"updateFileProgress",value:function(){this.file.progress=this.progress}},{key:"pause",value:function(){this.file.active=!1,this.stopChunks()}},{key:"stopChunks",value:function(){this.chunksUploading.forEach(function(t){t.xhr.abort(),t.active=!1}),this.stopSpeedCalc()}},{key:"resume",value:function(){this.file.active=!0,this.startChunking()}},{key:"upload",value:function(){var t=this;return this.promise=new Promise(function(r,n){t.resolve=r,t.reject=n}),this.start(),this.promise}},{key:"start",value:function(){var t=this;W({method:"POST",headers:F(F({},this.headers),{},{"Content-Type":"application/json"}),url:this.action,body:Object.assign(this.startBody,{phase:"start",mime_type:this.fileType,size:this.fileSize,name:this.fileName})}).then(function(r){if(r.status!=="success")return t.file.response=r,t.reject("server");t.sessionId=r.data.session_id,t.chunkSize=r.data.end_offset,t.createChunks(),t.startChunking()}).catch(function(r){t.file.response=r,t.reject("server")})}},{key:"startChunking",value:function(){for(var t=0;t<this.maxActiveChunks;t++)this.uploadNextChunk();this.startSpeedCalc()}},{key:"uploadNextChunk",value:function(){if(this.file.active){if(this.hasChunksToUpload)return this.uploadChunk(this.chunksToUpload[0]);if(this.chunksUploading.length===0)return this.finish()}}},{key:"uploadChunk",value:function(t){var r=this;t.progress=0,t.active=!0,this.updateFileProgress(),t.xhr=J({method:"POST",headers:this.headers,url:this.action}),t.xhr.upload.addEventListener("progress",function(n){n.lengthComputable&&(t.progress=Math.round(n.loaded/n.total*100))},!1),oe(t.xhr,Object.assign(this.uploadBody,{phase:"upload",session_id:this.sessionId,start_offset:t.startOffset,chunk:t.blob})).then(function(n){if(t.active=!1,n.status==="success")t.uploaded=!0;else if(t.retries--<=0)return r.stopChunks(),r.reject("upload");r.uploadNextChunk()}).catch(function(){if(t.active=!1,t.retries--<=0)return r.stopChunks(),r.reject("upload");r.uploadNextChunk()})}},{key:"finish",value:function(){var t=this;this.updateFileProgress(),this.stopSpeedCalc(),W({method:"POST",headers:F(F({},this.headers),{},{"Content-Type":"application/json"}),url:this.action,body:Object.assign(this.finishBody,{phase:"finish",session_id:this.sessionId})}).then(function(r){if(t.file.response=r,r.status!=="success")return t.reject("server");t.resolve(r)}).catch(function(r){t.file.response=r,t.reject("server")})}},{key:"startSpeedCalc",value:function(){var t=this;this.file.speed=0;var r=0;this.speedInterval||(this.speedInterval=window.setInterval(function(){var n=t.progress/100*t.fileSize;t.file.speed=n-r,r=n},1e3))}},{key:"stopSpeedCalc",value:function(){this.speedInterval&&window.clearInterval(this.speedInterval),this.speedInterval=null,this.file.speed=0}}]),s}(),Y={headers:{},action:"",minSize:1048576,maxActive:3,maxRetries:5,handler:le},Q=b.defineComponent({props:{inputId:{type:String},name:{type:String,default:"file"},accept:{type:String},capture:{},disabled:{default:!1},multiple:{type:Boolean,default:!1},maximum:{type:Number},addIndex:{type:[Boolean,Number]},directory:{type:Boolean},createDirectory:{type:Boolean,default:!1},postAction:{type:String},putAction:{type:String},customAction:{type:Function},headers:{type:Object,default:function(){return{}}},data:{type:Object,default:function(){return{}}},timeout:{type:Number,default:0},drop:{type:[Boolean,String,HTMLElement],default:function(){return!1}},dropDirectory:{type:Boolean,default:!0},size:{type:Number,default:0},extensions:{type:[RegExp,String,Array],default:function(){return[]}},modelValue:{type:Array,default:function(){return[]}},thread:{type:Number,default:1},chunkEnabled:{type:Boolean,default:!1},chunk:{type:Object,default:function(){return Y}}},emits:["update:modelValue","input-filter","input-file"],data:function(){return{files:this.modelValue,features:{html5:!0,directory:!1,drop:!1},active:!1,dropActive:!1,uploading:0,destroy:!1,maps:{},dropElement:null,dropTimeout:null,reload:!1}},mounted:function(){var e=this,t=document.createElement("input");if(t.type="file",t.multiple=!0,window.FormData&&t.files?((typeof t.webkitdirectory=="boolean"||typeof t.directory=="boolean")&&(this.features.directory=!0),this.features.html5&&typeof t.ondrop<"u"&&(this.features.drop=!0)):this.features.html5=!1,this.maps={},this.files)for(var r=0;r<this.files.length;r++){var n=this.files[r];this.maps[n.id]=n}this.$nextTick(function(){e.$parent?(e.$parent.$forceUpdate(),e.$parent.$nextTick(function(){e.watchDrop(e.drop)})):e.watchDrop(e.drop)})},beforeUnmount:function(){this.destroy=!0,this.active=!1,this.watchDrop(!1),this.watchActive(!1)},computed:{uploaded:function(){for(var e,t=0;t<this.files.length;t++)if(e=this.files[t],e.fileObject&&!e.error&&!e.success)return!1;return!0},chunkOptions:function(){return Object.assign(Y,this.chunk)},className:function(){return["file-uploads",this.features.html5?"file-uploads-html5":"file-uploads-html4",this.features.directory&&this.directory?"file-uploads-directory":void 0,this.features.drop&&this.drop?"file-uploads-drop":void 0,this.disabled?"file-uploads-disabled":void 0]},forId:function(){return this.inputId||this.name},iMaximum:function(){return this.maximum===void 0?this.multiple?0:1:this.maximum},iExtensions:function(){if(this.extensions){if(this.extensions instanceof RegExp)return this.extensions;if(this.extensions.length){var e=[];return typeof this.extensions=="string"?e=this.extensions.split(","):e=this.extensions,e=e.map(function(t){return t.trim()}).filter(function(t){return t}),new RegExp("\\.("+e.join("|").replace(/\./g,"\\.")+")$","i")}}},iDirectory:function(){if(this.directory&&this.features.directory)return!0}},watch:{active:function(e){this.watchActive(e)},dropActive:function(e){this.watchDropActive(e),this.$parent&&this.$parent.$forceUpdate()},drop:function(e){this.watchDrop(e)},modelValue:function(e){if(this.files!==e){this.files=e;var t=this.maps;this.maps={};for(var r=0;r<this.files.length;r++){var n=this.files[r];this.maps[n.id]=n}for(var i in this.maps){var a=this.maps[i],u=t[i];a!==u&&this.emitFile(a,u)}for(var f in t)this.maps[f]||this.emitFile(void 0,t[f])}}},methods:{newId:function(){return Math.random().toString(36).substr(2)},clear:function(){if(this.files.length){var e=this.files;this.files=[],this.maps={},this.emitInput();for(var t=0;t<e.length;t++)this.emitFile(void 0,e[t])}return!0},get:function(e){return e?R(e)==="object"?this.maps[e.id||""]||!1:this.maps[e]||!1:!1},add:function(e,t){var r;e instanceof Array?r=e:r=[e],t===void 0&&(t=this.addIndex);for(var n=[],i=0;i<r.length;i++){var a=r[i];this.features.html5&&a instanceof Blob&&(a={id:"",file:a,size:a.size,name:a.webkitRelativePath||a.relativePath||a.name||"unknown",type:a.type}),a=a;var u=!1;if(a.fileObject===!1||(a.fileObject||typeof Element<"u"&&a.el instanceof HTMLInputElement||typeof Blob<"u"&&a.file instanceof Blob)&&(u=!0),u&&(a=p(p({fileObject:!0,size:-1,name:"Filename",type:"",active:!1,error:"",success:!1,putAction:this.putAction,postAction:this.postAction,timeout:this.timeout},a),{},{response:{},progress:"0.00",speed:0}),a.data=p(p({},this.data),a.data?a.data:{}),a.headers=p(p({},this.headers),a.headers?a.headers:{})),a.id||(a.id=this.newId()),!this.emitFilter(a,void 0)&&(this.iMaximum>1&&n.length+this.files.length>=this.iMaximum||(n.push(a),this.iMaximum===1)))break}if(n.length){this.iMaximum===1&&this.clear();var f;if(t===!0||t===0)f=n.concat(this.files);else if(t){var h;f=this.files.concat([]),(h=f).splice.apply(h,[t,0].concat(I(n)))}else f=this.files.concat(n);this.files=f;var c=0;t===!0||t===0?c=0:t?t>=0?t+n.length>this.files.length?c=this.files.length-n.length:c=t:(c=this.files.length-n.length+t,c<0&&(c=0)):c=this.files.length-n.length,n=this.files.slice(c,c+n.length);for(var y=0;y<n.length;y++){var d=n[y];this.maps[d.id]=d}this.emitInput();for(var m=0;m<n.length;m++)this.emitFile(n[m],void 0);return e instanceof Array?n:n[0]}},addInputFile:function(e){var t=this,r=[];this.iMaximum;var n=e.webkitEntries||e.entries||void 0;if(n!=null&&n.length)return this.getFileSystemEntry(n).then(function(f){return t.add(f)});if(e.files)for(var i=0;i<e.files.length;i++){var a=e.files[i];r.push({id:"",size:a.size,name:a.webkitRelativePath||a.relativePath||a.name,type:a.type,file:a})}else{var u=e.value.replace(/\\/g,"/").split("/");(!u||!u.length)&&(u=[e.value]),delete e.__vuex__,r.push({id:"",name:u[u.length-1],el:e})}return Promise.resolve(this.add(r))},addDataTransfer:function(e){var t,r=this;if(e!=null&&(t=e.items)!==null&&t!==void 0&&t.length){for(var n=[],i=0;i<e.items.length;i++){var a=e.items[i],u=void 0;a.getAsEntry?u=a.getAsEntry()||a.getAsFile():a.webkitGetAsEntry?u=a.webkitGetAsEntry()||a.getAsFile():u=a.getAsFile(),u&&n.push(u)}return this.getFileSystemEntry(n).then(function(y){return r.add(y)})}var f=this.iMaximum,h=[];if(e.files.length){for(var c=0;c<e.files.length&&(h.push(e.files[c]),!(f>0&&h.length>=f));c++);return Promise.resolve(this.add(h))}return Promise.resolve([])},getFileSystemEntry:function(e){var t=this,r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"";return new Promise(function(n){var i=t.iMaximum;if(!e){n([]);return}if(e instanceof Array){var a=[],u=function m(C){var E=e[C];if(!E||i>0&&a.length>=i)return n(a);t.getFileSystemEntry(E,r).then(function(w){a.push.apply(a,I(w)),m(C+1)})};u(0);return}if(e instanceof Blob){n([{id:"",size:e.size,name:r+e.name,type:e.type,file:e}]);return}if(e.isFile){var f=e;f.file(function(m){n([{id:"",size:m.size,name:r+m.name,type:m.type,file:m}])});return}if(e.isDirectory&&t.dropDirectory){var h=e,c=[];t.createDirectory&&c.push({id:"",name:r+h.name,size:0,type:"text/directory",file:new File([],r+h.name,{type:"text/directory"})});var y=h.createReader(),d=function m(){y.readEntries(function(C){var E=function w(_){if(!C[_]&&_===0||i>0&&c.length>=i)return n(c);if(!C[_])return m();t.getFileSystemEntry(C[_],r+h.name+"/").then(function(U){c.push.apply(c,I(U)),w(_+1)})};E(0)})};d();return}n([])})},replace:function(e,t){var r=this.get(e),n=this.get(t);if(!r||!n||r===n)return!1;var i=this.files.concat([]),a=i.indexOf(r),u=i.indexOf(n);return a===-1||u===-1?!1:(i[a]=n,i[u]=r,this.files=i,this.emitInput(),!0)},remove:function(e){var t=this.get(e);if(t){if(this.emitFilter(void 0,t))return!1;var r=this.files.concat([]),n=r.indexOf(t);if(n===-1)return console.error("remove",t),!1;r.splice(n,1),this.files=r,delete this.maps[t.id],this.emitInput(),this.emitFile(void 0,t)}return t},update:function(e,t){var r=this.get(e);if(r){var n=p(p({},r),t);if(r.fileObject&&r.active&&!n.active&&!n.error&&!n.success&&(n.error="abort"),this.emitFilter(n,r))return!1;var i=this.files.concat([]),a=i.indexOf(r);return a===-1?(console.error("update",r),!1):(i.splice(a,1,n),this.files=i,n=this.files[a],delete this.maps[r.id],this.maps[n.id]=n,this.emitInput(),this.emitFile(n,r),n)}return!1},emitFilter:function(e,t){var r=!1;return this.$emit("input-filter",e,t,function(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;return r=n,r}),r},emitFile:function(e,t){var r,n=this;this.$emit("input-file",e,t),(r=e)!==null&&r!==void 0&&r.fileObject&&e.active&&(!t||!t.active)?(this.uploading++,this.$nextTick(function(){setTimeout(function(){e&&n.upload(e).then(function(){var i;e&&(e=n.get(e)||void 0),(i=e)!==null&&i!==void 0&&i.fileObject&&n.update(e,{active:!1,success:!e.error})}).catch(function(i){e&&n.update(e,{active:!1,success:!1,error:i.code||i.error||i.message||i})})},Math.ceil(Math.random()*50+50))})):(!e||!e.fileObject||!e.active)&&t&&t.fileObject&&t.active&&this.uploading--,this.active&&(!!e!=!!t||e.active!==t.active)&&this.watchActive(!0)},emitInput:function(){this.$emit("update:modelValue",this.files)},upload:function(e){var t=this.get(e);if(!t)return Promise.reject(new Error("not_exists"));if(!t.fileObject)return Promise.reject(new Error("file_object"));if(t.error)return t.error instanceof Error?Promise.reject(t.error):Promise.reject(new Error(t.error));if(t.success)return Promise.resolve(t);if(t.name&&this.iExtensions&&t.type!=="text/directory"&&t.name.search(this.iExtensions)===-1)return Promise.reject(new Error("extension"));if(this.size>0&&t.size!==void 0&&t.size>=0&&t.size>this.size&&t.type!=="text/directory")return Promise.reject(new Error("size"));if(this.customAction)return this.customAction(t,this);if(this.features.html5){if(this.shouldUseChunkUpload(t))return this.uploadChunk(t);if(t.putAction)return this.uploadPut(t);if(t.postAction)return this.uploadHtml5(t)}return t.postAction?this.uploadHtml4(t):Promise.reject(new Error("No action configured"))},shouldUseChunkUpload:function(e){return this.chunkEnabled&&!!this.chunkOptions.handler&&e.size&&e.size>this.chunkOptions.minSize},uploadChunk:function(e){var t=this.chunkOptions.handler;return e.chunk=new t(e,this.chunkOptions),e.chunk.upload().then(function(r){return e})},uploadPut:function(e){var t=[],r;for(var n in e.data)r=e.data[n],r!=null&&t.push(encodeURIComponent(n)+"="+encodeURIComponent(r));var i=e.putAction||"",a=t.length?(i.indexOf("?")===-1?"?":"&")+t.join("&"):"",u=new XMLHttpRequest;return u.open("PUT",i+a),this.uploadXhr(u,e,e.file)},uploadHtml5:function(e){var t=new window.FormData,r;for(var n in e.data)r=e.data[n],r&&R(r)==="object"&&typeof r.toString!="function"?r instanceof File?t.append(n,r,r.name):t.append(n,JSON.stringify(r)):r!=null&&t.append(n,r);t.append(this.name,e.file,e.name||e.file.name||e.file.filename);var i=new XMLHttpRequest;return i.open("POST",e.postAction||""),this.uploadXhr(i,e,t)},uploadXhr:function(e,t,r){var n=this,i=t,a=0,u=0;e.upload.onprogress=function(h){if(i&&(i=n.get(i),!(!h.lengthComputable||!i||!i.fileObject||!i.active))){var c=Math.round(Date.now()/1e3);c!==a&&(a=c,i=n.update(i,{progress:(h.loaded/h.total*100).toFixed(2),speed:h.loaded-u}),u=h.loaded)}};var f=window.setInterval(function(){if(i&&(i=n.get(i))){var h;if((h=i)!==null&&h!==void 0&&h.fileObject&&!i.success&&!i.error&&i.active)return}f&&(clearInterval(f),f=void 0);try{e.abort(),e.timeout=1}catch{}},100);return new Promise(function(h,c){if(!i){c(new Error("not_exists"));return}var y,d=function(E){if(!y){if(y=!0,f&&(clearInterval(f),f=void 0),!i)return c(new Error("not_exists"));if(i=n.get(i),!i)return c(new Error("not_exists"));if(!i.fileObject)return c(new Error("file_object"));if(i.error)return i.error instanceof Error?c(i.error):c(new Error(i.error));if(!i.active)return c(new Error("abort"));if(i.success)return h(i);var w={};switch(E.type){case"timeout":case"abort":w.error=E.type;break;case"error":e.status?e.status>=500?w.error="server":e.status>=400&&(w.error="denied"):w.error="network";break;default:e.status>=500?w.error="server":e.status>=400?w.error="denied":w.progress="100.00"}if(e.responseText){var _=e.getResponseHeader("Content-Type");_&&_.indexOf("/json")!==-1?w.response=JSON.parse(e.responseText):w.response=e.responseText}return i=n.update(i,w),i?i.error?i.error instanceof Error?c(i.error):c(new Error(i.error)):h(i):c(new Error("abort"))}};e.onload=d,e.onerror=d,e.onabort=d,e.ontimeout=d,i.timeout&&(e.timeout=i.timeout);for(var m in i.headers)e.setRequestHeader(m,i.headers[m]);i=n.update(i,{xhr:e}),i&&e.send(r)})},uploadHtml4:function(e){var t=this,r=e;if(!r)return Promise.reject(new Error("not_exists"));var n=function(d){d.keyCode===27&&d.preventDefault()},i=document.createElement("iframe");i.id="upload-iframe-"+r.id,i.name="upload-iframe-"+r.id,i.src="about:blank",i.setAttribute("style","width:1px;height:1px;top:-999em;position:absolute; margin-top:-999em;");var a=document.createElement("form");a.setAttribute("action",r.postAction||""),a.name="upload-form-"+r.id,a.setAttribute("method","POST"),a.setAttribute("target","upload-iframe-"+r.id),a.setAttribute("enctype","multipart/form-data");for(var u in r.data){var f=r.data[u];if(f&&R(f)==="object"&&typeof f.toString!="function"&&(f=JSON.stringify(f)),f!=null){var h=document.createElement("input");h.type="hidden",h.name=u,h.value=f,a.appendChild(h)}}a.appendChild(r.el),document.body.appendChild(i).appendChild(a);var c=function(){var d,m;try{i.contentWindow&&(m=i.contentWindow.document)}catch{}if(!m)try{m=i.contentDocument?i.contentDocument:i.document}catch{m=i.document}return(d=m)!==null&&d!==void 0&&d.body?m.body.innerHTML:null};return new Promise(function(y,d){setTimeout(function(){if(!r){d(new Error("not_exists"));return}if(r=t.update(r,{iframe:i}),!r)return d(new Error("not_exists"));var m=window.setInterval(function(){r&&(r=t.get(r))&&r.fileObject&&!r.success&&!r.error&&r.active||(m&&(clearInterval(m),m=void 0),i.onabort({type:r?"abort":"not_exists"}))},100),C,E=function(_){var U;if(!C){if(C=!0,m&&(clearInterval(m),m=void 0),document.body.removeEventListener("keydown",n),!r)return d(new Error("not_exists"));if(r=t.get(r),!r)return d(new Error("not_exists"));if(!r.fileObject)return d(new Error("file_object"));if(r.error)return r.error instanceof Error?d(r.error):d(new Error(r.error));if(!r.active)return d(new Error("abort"));if(r.success)return y(r);var D=c(),O={};if(typeof _=="string")return d(new Error(_));switch(_.type){case"abort":O.error="abort";break;case"error":r.error?O.error=r.error:D===null?O.error="network":O.error="denied";break;default:r.error?O.error=r.error:D===null?O.error="network":O.progress="100.00"}if(D!==null){if(D&&D.substr(0,1)==="{"&&D.substr(D.length-1,1)==="}")try{D=JSON.parse(D)}catch{}O.response=D}return r=t.update(r,O),r?(U=r)!==null&&U!==void 0&&U.error?r.error instanceof Error?d(r.error):d(new Error(r.error)):y(r):d(new Error("not_exists"))}};i.onload=E,i.onerror=E,i.onabort=E,document.body.addEventListener("keydown",n),a.submit()},50)}).then(function(y){var d;return i==null||(d=i.parentNode)===null||d===void 0||d.removeChild(i),y}).catch(function(y){var d;return i==null||(d=i.parentNode)===null||d===void 0||d.removeChild(i),y})},watchActive:function(e){for(var t,r=0;t=this.files[r];)if(r++,t.fileObject)if(e&&!this.destroy){if(this.uploading>=this.thread||this.uploading&&!this.features.html5)break;!t.active&&!t.error&&!t.success&&this.update(t,{active:!0})}else t.active&&this.update(t,{active:!1});this.uploading===0&&(this.active=!1)},watchDrop:function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:void 0;if(this.features.drop&&e!==t){if(this.dropElement)try{document.removeEventListener("dragenter",this.onDocumentDragenter,!1),document.removeEventListener("dragleave",this.onDocumentDragleave,!1),document.removeEventListener("dragover",this.onDocumentDragover,!1),document.removeEventListener("drop",this.onDocumentDrop,!1),this.dropElement.removeEventListener("dragover",this.onDragover,!1),this.dropElement.removeEventListener("drop",this.onDrop,!1)}catch{}var r=null;if(e)if(typeof e=="string")r=document.querySelector(e)||this.$root.$el.querySelector(e);else if(e===!0){var n;if(r=this.$parent.$el,!r||((n=r)===null||n===void 0?void 0:n.nodeType)===8){var i;r=this.$root.$el,(!r||((i=r)===null||i===void 0?void 0:i.nodeType)===8)&&(r=document.body)}}else r=e;this.dropElement=r,this.dropElement&&(document.addEventListener("dragenter",this.onDocumentDragenter,!1),document.addEventListener("dragleave",this.onDocumentDragleave,!1),document.addEventListener("dragover",this.onDocumentDragover,!1),document.addEventListener("drop",this.onDocumentDrop,!1),this.dropElement.addEventListener("dragover",this.onDragover,!1),this.dropElement.addEventListener("drop",this.onDrop,!1))}},watchDropActive:function(e,t){e!==t&&(this.dropTimeout&&(clearTimeout(this.dropTimeout),this.dropTimeout=null),e&&(this.dropTimeout=setTimeout(this.onDocumentDrop,1e3)))},onDocumentDragenter:function(e){var t,r;if(!this.dropActive&&e.dataTransfer){var n=e.dataTransfer;n!=null&&(t=n.files)!==null&&t!==void 0&&t.length?this.dropActive=!0:n.types?n.types.indexOf&&n.types.indexOf("Files")!==-1?this.dropActive=!0:(r=n.types)!==null&&r!==void 0&&r.contains&&n.types.contains("Files")&&(this.dropActive=!0):this.dropActive=!0,this.dropActive&&this.watchDropActive(!0)}},onDocumentDragleave:function(e){this.dropActive&&(e.target===e.explicitOriginalTarget||!e.fromElement&&(e.clientX<=0||e.clientY<=0||e.clientX>=window.innerWidth||e.clientY>=window.innerHeight))&&(this.dropActive=!1,this.watchDropActive(!1))},onDocumentDragover:function(){this.watchDropActive(!0)},onDocumentDrop:function(){this.dropActive=!1,this.watchDropActive(!1)},onDragover:function(e){e.preventDefault()},onDrop:function(e){e.preventDefault(),e.dataTransfer&&this.addDataTransfer(e.dataTransfer)},inputOnChange:async function(e){var t=this;if(!(e.target instanceof HTMLInputElement))return Promise.reject(new Error("not HTMLInputElement"));e.target;var r=function(i){return t.reload=!0,t.$nextTick(function(){t.reload=!1}),i};return this.addInputFile(e.target).then(r).catch(r)}}}),ue=["for"],de=["name","id","accept","capture","disabled","webkitdirectory","allowdirs","directory","multiple"];function ce(s,e,t,r,n,i){return b.openBlock(),b.createElementBlock("span",{class:b.normalizeClass(s.className)},[b.renderSlot(s.$slots,"default"),b.createElementVNode("label",{for:s.forId},null,8,ue),s.reload?b.createCommentVNode("",!0):(b.openBlock(),b.createElementBlock("input",{key:0,ref:"input",type:"file",name:s.name,id:s.forId,accept:s.accept,capture:s.capture,disabled:s.disabled,webkitdirectory:s.iDirectory,allowdirs:s.iDirectory,directory:s.iDirectory,multiple:s.multiple&&s.features.html5,onChange:e[0]||(e[0]=function(){return s.inputOnChange&&s.inputOnChange.apply(s,arguments)})},null,40,de))],2)}function fe(s,e){e===void 0&&(e={});var t=e.insertAt;if(!(!s||typeof document>"u")){var r=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css",t==="top"&&r.firstChild?r.insertBefore(n,r.firstChild):r.appendChild(n),n.styleSheet?n.styleSheet.cssText=s:n.appendChild(document.createTextNode(s))}}var pe=`
.file-uploads {
  overflow: hidden;
  position: relative;
  text-align: center;
  display: inline-block;
}
.file-uploads.file-uploads-html4 input,
.file-uploads.file-uploads-html5 label {
  /* background fix ie  click */
  background: #fff;
  opacity: 0;
  font-size: 20em;
  z-index: 1;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  position: absolute;
  width: 100%;
  height: 100%;
}
.file-uploads.file-uploads-html5 input,
.file-uploads.file-uploads-html4 label {
  /* background fix ie  click */
  position: absolute;
  background: rgba(255, 255, 255, 0);
  overflow: hidden;
  position: fixed;
  width: 1px;
  height: 1px;
  z-index: -1;
  opacity: 0;
}
`;return fe(pe),Q.render=ce,Q})})(re);var ps=re.exports;const hs=ts(ps);ss.add(ns,is,as,os);const ms={name:"DatasetUpload",components:{Menu:he,FontAwesomeIcon:ls,FileUpload:hs,JenaTable:us},mixins:[me],...ve,data(){return{datasetGraphName:null,datasetFiles:null,graphNameClasses:["form-control"],fileUploadClasses:["btn","btn-success"],upload:{files:[],accept:"",minSize:0,multiple:!0,directory:null,drop:!0,dropDirectory:!0,addIndex:!1,thread:3,name:"file",headers:{},data:{},autoCompress:1024*1024,uploadAuto:!1,isOption:!1},datasetTableFields:Object.freeze([{key:"name",label:"name",sortable:!0,sortDirection:"asc"},{key:"size",label:"size",sortable:!0,sortDirection:"asc"},{key:"speed",label:"speed"},{key:"status",label:"status"},{key:"actions",label:"actions"}])}},computed:{datasetTableItems(){return this.upload.files?this.upload.files.map(l=>Object.assign(l,{status:this.getFileStatus(l)})):[]},postActionUrl(){if(this.services===null||!this.services["gsp-rw"]||this.services["gsp-rw"].length===0)return"";const l=this.datasetGraphName&&this.datasetGraphName!==""?`?graph=${this.datasetGraphName}`:"",k=this.services["gsp-rw"]["srv.endpoints"].find(b=>b!=="")||"";return this.$fusekiService.getFusekiUrl(`/${this.datasetName}/${k}${l}`)},uploadCount(){return!this.upload||!this.upload.files?0:this.upload.files.length},uploadSucceededCount(){return!this.upload||!this.upload.files?0:this.upload.files.filter(l=>!!l.success).length},uploadFailedCount(){return!this.upload||!this.upload.files?0:this.upload.files.filter(l=>!!l.error).length},uploadFailedPercentage(){return this.uploadCount===0?0:this.uploadFailedCount/this.uploadCount*100},uploadSucceededPercentage(){return this.uploadCount===0?0:this.uploadSucceededCount/this.uploadCount*100}},watch:{datasetGraphName(){this.validateGraphName()},upload:{handler(){this.validateFiles()},deep:!0,immediate:!1}},methods:{getFileStatus(l){return l.error?"danger":l.success?"success":l.active?"warning":""},remove(l){this.$refs.upload.remove(l)},readableFileSize:function(l){return l>=1048576?`${(l/1048576).toFixed(2).replace(/\.?0*$/,"")}mb`:l>=1024?`${(l/1024).toFixed(2).replace(/\.?0*$/,"")}kb`:`${l} bytes`},uploadAll(){this.validateForm()&&(this.$refs.upload.active=!0)},validateForm(){return this.validateGraphName()&&this.validateFiles()},validateGraphName(){const l=/^[^\s]+$/,k=this.$refs["dataset-graph-name"].value;return k===""||l.test(k)?(this.graphNameClasses=["form-control is-valid"],!0):(this.graphNameClasses=["form-control is-invalid"],!1)},validateFiles(){return this.upload.files!==null&&this.upload.files.length>0?(this.fileUploadClasses=["btn","btn-success","is-valid"],!0):(this.fileUploadClasses=["btn","btn-success","is-invalid"],!1)},async handleUploadWithErrorHandling(l,k){try{return k.uploadHtml5(l).catch(b=>Z(this,b))}catch(b){Z(this,b)}}}},vs={class:"container-fluid"},gs={class:"row mt-4"},ys={class:"col-12"},bs={class:"card"},ks={class:"card-header"},ws={key:0,class:"card-body"},Cs=o("div",{class:"alert alert-warning"}," No service for adding data available. The Graph Store Protocol service should be configured to allow adding data. ",-1),_s=[Cs],Es={key:1,class:"card-body"},Ss={class:"drop-active"},Ds=o("h3",null,"Drop files to upload",-1),Os=[Ds],As={class:"row"},Ps={class:"col-sm-12"},Ts=o("p",null," Load data into the default graph of the currently selected dataset, or the given named graph. You may upload any RDF format, such as Turtle, RDF/XML or TRiG. ",-1),xs={ref:"upload-form",novalidate:""},Is={id:"dataset-graph-name-group",role:"group",class:"form-row form-group"},Ns=o("label",{for:"dataset-graph-name",class:"col-sm-4 col-md-4 col-lg-2 col-12 col-form-label col-form-label-sm"},"Dataset graph name",-1),js={class:"col input-group has-validation"},Rs=o("div",{class:"invalid-feedback"}," Invalid graph name. Please remove any spaces. ",-1),Us={id:"dataset-files",role:"group",class:"form-row form-group"},zs=o("label",{class:"col-sm-4 col-md-4 col-lg-2 col-12 col-form-label col-form-label-sm"},"Files to upload",-1),Ms={class:"col has-validation"},Bs=o("span",{class:"ms-2"},"select files",-1),Fs=o("span",{class:"ms-2"},"upload all",-1),Hs=o("span",{class:"ms-2"},"stop upload",-1),$s=o("div",{class:"invalid-feedback"}," Invalid upload files. Please select at least one file to upload. ",-1),Ls={class:"pt-2 pb-2"},Vs={class:"progress",style:{height:"1.5rem"}},qs=["aria-valuenow","title"],Gs=["aria-valuenow","title"],Ks={class:"row"},Xs={class:"col"},Js={class:"progress"},Ws=["aria-valuenow"],Ys=o("span",{class:"small"},"Triples uploaded: ",-1),Qs={key:0,class:"small"},Zs={key:1,class:"small"},en=["onClick"],tn=o("span",{class:"ms-2"},"upload now",-1),rn=["onClick"],sn=o("span",{class:"ms-2"},"remove",-1);function nn(l,k,b,I,g,v){const L=z("Menu"),x=z("FontAwesomeIcon"),j=z("file-upload"),B=z("jena-table");return T(),P("div",vs,[o("div",gs,[o("div",ys,[o("h2",null,"/"+S(l.datasetName),1),o("div",bs,[o("nav",ks,[A(L,{"dataset-name":l.datasetName},null,8,["dataset-name"])]),l.services!==null&&(!l.services["gsp-rw"]||l.services["gsp-rw"].length===0)?(T(),P("div",ws,_s)):(T(),P("div",Es,[G(o("div",Ss,Os,512),[[te,l.$refs.upload&&l.$refs.upload.dropActive]]),o("div",As,[o("div",Ps,[o("h3",null,"Upload files "+S(v.postActionUrl),1),Ts,o("form",xs,[o("div",Is,[Ns,o("div",js,[G(o("input",{"onUpdate:modelValue":k[0]||(k[0]=p=>g.datasetGraphName=p),class:H(g.graphNameClasses),id:"dataset-graph-name",ref:"dataset-graph-name",type:"text",placeholder:"Leave blank for default graph"},null,2),[[ee,g.datasetGraphName]]),Rs])]),o("div",Us,[zs,o("div",Ms,[A(j,{ref:"upload",value:g.upload.files,"onUpdate:modelValue":k[1]||(k[1]=p=>g.upload.files=p),"post-action":v.postActionUrl,extensions:g.upload.extensions,accept:g.upload.accept,multiple:g.upload.multiple,directory:g.upload.directory,size:g.upload.size||0,thread:g.upload.thread<1?1:g.upload.thread>5?5:g.upload.thread,headers:g.upload.headers,data:g.upload.data,drop:g.upload.drop,"drop-directory":g.upload.dropDirectory,"add-index":g.upload.addIndex,class:H(g.fileUploadClasses),"custom-action":v.handleUploadWithErrorHandling},{default:N(()=>[A(x,{icon:"plus"}),Bs]),_:1},8,["value","post-action","extensions","accept","multiple","directory","size","thread","headers","data","drop","drop-directory","add-index","class","custom-action"]),!l.$refs.upload||!l.$refs.upload.active?(T(),P("button",{key:0,onClick:k[2]||(k[2]=M(p=>v.uploadAll(),["prevent"])),type:"button",class:"btn btn-primary ms-2 d-inline upload-files"},[A(x,{icon:"upload"}),Fs])):(T(),P("button",{key:1,onClick:k[3]||(k[3]=M(p=>l.$refs.upload.active=!1,["prevent"])),type:"button",class:"btn btn-primary ms-2 d-inline"},[A(x,{icon:"times-circle"}),Hs])),$s])]),o("div",Ls,[o("div",Vs,[o("div",{style:$(`width: ${v.uploadSucceededPercentage}%`),"aria-valuenow":v.uploadSucceededPercentage,title:`${v.uploadSucceededCount}/${v.uploadCount}`,class:"progress-bar",role:"progressbar","aria-valuemin":"0","aria-valuemax":"100"},S(v.uploadSucceededCount)+"/"+S(v.uploadCount),13,qs),o("div",{style:$(`width: ${v.uploadFailedPercentage}%`),"aria-valuenow":v.uploadFailedPercentage,title:`${v.uploadFailedCount}/${v.uploadCount}`,class:"progress-bar bg-danger",role:"progressbar","aria-valuemin":"0","aria-valuemax":"100"},S(v.uploadFailedCount)+"/"+S(v.uploadCount),13,Gs)])])],512)])]),o("div",Ks,[o("div",Xs,[A(B,{fields:g.datasetTableFields,items:v.datasetTableItems,"empty-text":"No files selected",bordered:"",fixed:"",hover:""},{"cell(size)":N(p=>[q(S(v.readableFileSize(p.item.size)),1)]),"cell(speed)":N(p=>[q(S(v.readableFileSize(p.item.speed))+"/s ",1)]),"cell(status)":N(p=>[o("div",Js,[o("div",{class:H(`progress-bar bg-${v.getFileStatus(p.item)}`),style:$(`width: ${p.item.progress}%`),"aria-valuenow":`${p.item.progress}`,"aria-valuemin":"0","aria-valuemax":"100",role:"progressbar"},S(p.item.progress),15,Ws)]),Ys,p.item.response.tripleCount?(T(),P("span",Qs,S(p.item.response.tripleCount),1)):(T(),P("span",Zs,"0"))]),"cell(actions)":N(p=>[o("button",{onClick:M(V=>p.item.success||p.item.error==="compressing"?!1:l.$refs.upload.update(p.item,{active:!0}),["prevent"]),type:"button",class:"btn btn-outline-primary me-0 mb-2 d-block upload-file"},[A(x,{icon:"upload"}),tn],8,en),o("button",{onClick:M(V=>v.remove(p.item),["prevent"]),type:"button",class:"btn btn-outline-primary me-0 mb-md-0 d-block d-md-inline-block remove-file"},[A(x,{icon:"minus-circle"}),sn],8,rn)]),_:1},8,["fields","items"])])])]))])])])])}const dn=rs(ms,[["render",nn]]);export{dn as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
